global
        maxconn 20480
        #每个进程的最大连接数
        ulimit-n 65535
        chroot /usr/local/haproxy1517
        uid 99
        gid 99
        #设定运行的uid和gid 或者使用用户名和组名 
        daemon
        #设置后台运行 推荐的方式
        #quiet
        nbproc 8
        #启动的时候创建的进程数量 推荐应该小于cpu核数
        pidfile /usr/local/haproxy1517/haproxy.pid
        log 127.0.0.1 local3
        #配置日志为rsyslog local3
        #log 127.0.0.1 local0 info
        #配置日志为rsyslog local0 的info级别
defaults
        log    global
        mode    http
        #设置实例运行的模式 tcp或者http
        option  httplog
        #默认不记录http请求的日志 此选项开启日志记录
        option  dontlognull
        #不记录空连接日志 健康检查的日志?
        retries 3
        #连接后端服务器重试次数 超过次数标记不可用
        option redispatch
        #保持cookie 发生故障后转移服务器并刷新cookie
        #option forwardfor
        option  httpclose
        balance roundrobin
        stats refresh 30
        maxconn 20480
        timeout connect 5000
        timeout client  50000
        timeout server  50000
        timeout check 2000

#监控页面 listen相当于frontend和backend的组合       
listen admin_status
        bind-process 1
        bind *:23333
        mode http
        log 127.0.0.1 local3 err
        stats refresh 5
        stats uri       /admin?stats
        stats auth admin:Admin@push
        stats hide-version
        stats admin if TRUE
        
        errorfile 403 /usr/local/haproxy1517/errorfiles/403.http 
        errorfile 500 /usr/local/haproxy1517/errorfiles/500.http 
        errorfile 502 /usr/local/haproxy1517/errorfiles/502.http 
        errorfile 503 /usr/local/haproxy1517/errorfiles/503.http 
        errorfile 504 /usr/local/haproxy1517/errorfiles/504.http 
       
        #haproxy日志记录内容设置# 
        capture request  header Host           len 40 
        capture request  header Content-Length len 10 
        capture request  header Referer        len 200 
        capture response header Server         len 40 
        capture response header Content-Length len 10

#监控后端服务器状态#
listen site_status
        bind-process 1
        bind *:23334
        mode http
        log 127.0.0.1 local3 err
        #err warning info debug#
        monitor-uri /site_status
        #acl site_dead nbsrv(server_dynamic) lt 2
        #后端server_dynamic少于几台在线则服务不可用#
        #acl site_dead nbsrv(server_static) lt 2
        #monitor fail if site_dead
        #site dead response 503#
        #monitor-net 192.168.1.3/32 
        #不记录转发192.168.1.3的日志#

frontend cms
	bind-process 1-8
        bind            0.0.0.0:80
        #bind           192.168.1.10:443 ssl crt /etc/haproxy/haproxy.pem
        mode            http
        log             global
        option          httplog
        option          httpclose
        #option          forwardfor
        #后端需要客户端真实ip的时候开启#

        ##acl策略配置##
	#acl acl_dynamic hdr_reg(host) -i ^(itvmkt.ah163.net|itvmkt1.ah163.net)$
        #正则匹配域名#
	#acl acl_dynamic hdr_dom(host) -i itvmkt.ah163.net 
	#acl acl_static hdr_dom(host) -i itvmkt2.ah163.net 
        #匹配域名 -i 不区分大小写#
        #acl acl_dynamic hdr(host) -i itvmkt.ah163.net
        #acl file_req url_sub -i  id=
        #请求url中包含id＝ 则返回ture 否则为false#
        #acl dir_req url_dir -i allow
        #请求url中存在部分地址路径为allow 返回true 否则为false#
        #acl missing_cl hdr_cnt(Content-length) eq 0
        #当请求的header中Content-length等于0时返回true#

        ##acl策略匹配##
        #block if missing_cl
        #当请求的header中Content-length等于0时阻止请求 返回403#
        #block 表示阻止请求 返回403#
        #block if !file_req || dir_req
        #如果不满足策略file_req 或者满足策略dir_req 则阻止请求#
        #use_backend     servre_dynamic if { hdr_beg(host) -i img }
        #use_backend     server_dynamic if { path_beg /img /css   }
        #redirect prefix http://test code 301 if acl_static
        #当访问itvmkt2.ah163.net的时候，用http的301挑转到http://test#
        #use_backend server_dynamic if acl_dynamic
        default_backend server_dynamic

# The backend setting
backend server_dynamic
	bind-process 1-8
        mode            http
        balance         roundrobin
        #option prefer-last-server
        cookie          SERVERID
        #retries         2
        #option redispatch
        #timeout connect 5s
        #timeout server  5s
	#健康检测,不配置默认用4层 配置了就是7层#
        #option httpchk /index.html HTTP/1.0
        #option httpchk
	#监听端口
	option httpchk  GET /haproxycheck.php
        #GET后端的web页面检测
	#option httpchk HEAD /index.jsp HTTP/1.1\r\nHost:\ www.xxx.com
	#匹配头信息 更加精细化
        server cms1 192.168.1.105:80 cookie cms1 check inter 1500 rise 3 fall 3 weight 1
        server cms2 192.168.1.106:80 cookie cms2 check inter 1500 rise 3 fall 3 weight 2
        server cms3 192.168.1.107:80 cookie cms3 check inter 1500 rise 3 fall 3 weight 3

#backend static 
#        mode            http
#        balance         roundrobin
#        retries         2
#        option redispatch
#        timeout connect 5s
#        timeout server  30s
#        timeout queue   30s
#        option httpchk  HEAD /login.php
#        cookie          DYNSRV insert indirect nocache
#        fullconn        4000 # the servers will be used at full load above this number of connections
#        server          dynsrv1 192.168.1.1:80 minconn 50 maxconn 500 cookie s1 check inter 1000
#        server          dynsrv2 192.168.1.2:80 minconn 50 maxconn 500 cookie s2 check inter 1000
#        server          dynsrv3 192.168.1.3:80 minconn 50 maxconn 500 cookie s3 check inter 1000
#        server          dynsrv4 192.168.1.4:80 minconn 50 maxconn 500 cookie s4 check inter 1000
