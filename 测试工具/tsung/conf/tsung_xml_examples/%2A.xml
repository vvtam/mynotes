<?xml version="1.0"?>
<!DOCTYPE tsung SYSTEM "/usr/share/tsung/tsung-1.0.dtd">
<tsung loglevel="debug" version="1.0">
	<clients>
		<client host="ubuntu" maxusers="5"></client>
	</clients>

	<servers>
        <server host="127.0.0.1" port="5672" type="tcp" />
	</servers>

	<load duration="72" unit="hour">
        <user session="amqp_consumer" start_time="1" unit="second"></user>

		<arrivalphase phase="1" duration="3" unit="second">
			<users maxnumber="1" arrivalrate="1" unit="second"/>
		</arrivalphase>
	</load>

	<options>
        <!--amqp config: username and password -->
        <option type="ts_amqp" name="username" value="guest" />
        <option type="ts_amqp" name="password" value="guest" />

        <!--amqp heartbeat timeout: 30s (default 600s)-->
        <option type="ts_amqp" name="heartbeat" value="30" />
	</options>

	<sessions>
		<session probability="100" name="amqp_publisher" type="ts_amqp" bidi="true">
            <request>
                <amqp type="connection.open" vhost="/"></amqp>
            </request>

            <!--  open channel, channel id is from 1 to 10 -->
            <for from="1" to="10" incr="1" var="loops">
                <request>
                    <amqp type="channel.open"></amqp>
                </request>
            </for>

            <!-- ignore this request if you don't need publisher confirm -->
            <for from="1" to="10" incr="1" var="loops">
                <request subst="true">
                    <amqp type="confirm.select" channel="%%_loops%%"></amqp>
                </request>
            </for>
            
            <for from="1" to="10" incr="1" var="loops">
                <for from="1" to="100" incr="1" var="counter">
                    <transaction name="publish">
                        <!-- specify payload_size to have tsung generate a payload for you -->
                        <request subst="true">
                            <amqp type="basic.publish" channel="%%_loops%%" exchange="test_exchange" routing_key="test_queue" persistent="true" payload_size="100"></amqp>
                        </request>
                        <!-- substitutions are supported on the payload. Payload will override payload_size. -->
                        <request subst="true">
                            <amqp type="basic.publish" channel="%%_loops%%" exchange="test_exchange" routing_key="test_queue" persistent="true" payload="Test Payload"></amqp>
                        </request>
                    </transaction>
                </for>

                <!-- if publish with confirm, add a waitForConfirms request as you need: timeout=1s -->
                <request>
                    <amqp type="waitForConfirms" timeout="1"></amqp>
                </request>
            </for>

            <for from="1" to="10" incr="1" var="loops">
                <request subst="true">
                    <amqp type="channel.close" channel="%%_loops%%"></amqp>
                </request>
            </for>

            <request>
                <amqp type="connection.close"></amqp>
            </request>
		</session>
		<session probability="0" name="amqp_consumer" type="ts_amqp" bidi="true">
            <request>
                <amqp type="connection.open"></amqp>
            </request>

            <for from="1" to="10" incr="1" var="loops">
                <request>
                    <amqp type="channel.open"></amqp>
                </request>
            </for>

            <!-- ignore this request if you don't need qos(prefetch_count only) -->
            <for from="1" to="10" incr="1" var="loops">
                <request subst="true">
                    <amqp type="basic.qos" channel="%%_loops%%" prefetch_count="200"></amqp>
                </request>
            </for>

            <for from="1" to="10" incr="1" var="loops">
                <request subst="true">
                    <amqp type="basic.consume" channel="%%_loops%%" queue="test_queue" ack="true"></amqp>
                </request>
            </for>

            <!-- wait to receive messages from the server: timeout=180s -->
            <request>
                <amqp type="waitForMessages" timeout="180"></amqp>
            </request>

            <for from="1" to="10" incr="1" var="loops">
                <request subst="true">
                    <amqp type="channel.close" channel="%%_loops%%"></amqp>
                </request>
            </for>

            <request>
                <amqp type="connection.close"></amqp>
            </request>
		</session>
	</sessions>
</tsung>
<?xml version="1.0"?>
<!DOCTYPE tsung SYSTEM "/usr/share/tsung/tsung-1.0.dtd">
<tsung loglevel="notice" dumptraffic="false">

<!-- Get clients from torque batch manager. Ideally, we need 256 cores to do this test. -->
  <clients>
    <client type="batch" batch="torque" maxusers="8000"/>
  </clients>

<!-- server is not used by fs plugin, so this is meaningless -->
  <servers>
    <server host="127.0.0.1" port="5432" type="erlang"/>
  </servers>

  <monitoring>
   <monitor batch="true" host="torque" type="erlang"/>
   <monitor host="nef-server" type="munin"/>
  </monitoring>

<!-- 4 phases, from 32 to 256 simultaneous users -->
 <load>
 <arrivalphase phase="1" duration="10" unit="minute">
    <users maxnumber="32" arrivalrate="10" unit="second"/>
  </arrivalphase>
  <arrivalphase phase="2" duration="20" unit="minute">
    <users maxnumber="64" arrivalrate="10" unit="second"/>
  </arrivalphase>
  <arrivalphase phase="3" duration="30" unit="minute">
    <users maxnumber="128" arrivalrate="10" unit="second"/>
  </arrivalphase>
  <arrivalphase phase="4" duration="45" unit="minute">
    <users maxnumber="256" arrivalrate="10" unit="second"/>
  </arrivalphase>
 </load>

<options>
  <!-- Use the same seed for each test -->
  <option name="seed" value="43"/>
</options>

<sessions>
  <session probability="100" name="fs-example" type="ts_fs">
    <!-- First create a directory for the current user -->
    <transaction name="mkdir">
    <request subst="true">
      <fs cmd="make_dir" path="/mnt/bench/%%_tsung_userid%%"/>
    </request>
    </transaction>

    <!-- Then write 100 files (6.5MB per file) sequentially-->
    <for from="1" to="100" var="file" incr="1">
    <transaction name="write_file">
      <request subst="true">
        <fs cmd="open" mode="write" path="/mnt/bench/%%_tsung_userid%%/tsung-write.bin.%%_file%%"/>
      </request>
      <for from="0" to="100" var="chunk" incr="1">
        <request><fs cmd="write_chunk" size="65536"/></request>
      </for>
      <request><fs cmd="close"/></request>
    </transaction>
    <thinktime random='false' value="1"/>
    </for>


    <!-- Get an id of a users from another node to avoid cache effects on the
         client side. Here we assume that each client machine has 8 cores -->

     <setdynvars sourcetype="eval" code="fun({Pid,DynVars})->
                                    {ok,Val} = ts_dynvars:lookup(tsung_userid,DynVars),
                                    {Id,Mod} = case list_to_integer(Val) of
                                       I when I > 128 -> {I,256};
                                       I when I > 64  -> {I,128};
                                       I when I > 32  -> {I,64};
                                       I              -> {I,32}
                                    end,
                                    case Id &lt; 9 of
                                     true -> (abs(Id+8) rem Mod) +1;
                                     _ ->
                                             (abs(Id-9) rem Mod) +1
                                    end
                                  end.">
        <var name="previd"/>
     </setdynvars>

    <!-- Wait 30 sec  -->
    <thinktime min="30" max="31"/>

    <!-- Read 100 files from another tsung user, using the computed id -->
      <for from="1" to="100" var="file" incr="1">
        <transaction name="read_file">
          <request subst="true">
            <fs cmd="open" mode="read" path="/mnt/bench/%%_previd%%/tsung-write.bin.%%_file%%"/>
          </request>
       <for from="1" to="100" var="chunk" incr="1">
         <request><fs cmd="read_chunk" size="65536"/></request>
       </for>
       <request><fs cmd="close"/></request>
        </transaction>
        <thinktime random='false' value="1"/>
      </for>

</session>
 </sessions>
</tsung>
<?xml version="1.0"?>
<!DOCTYPE tsung SYSTEM "/usr/share/tsung/tsung-1.0.dtd">
<tsung loglevel="debug" dumptraffic="true" version="1.0">

  <clients>
    <client host="localhost" weight="1" maxusers="1000" use_controller_vm="true"/>
  </clients>

  <servers>
    <server host="localhost" port="443" type="ssl"></server>
  </servers>

	<load>
   <arrivalphase phase="1" duration="1" unit="second">
    <users interarrival="1" unit="second"></users>
   </arrivalphase>
  </load>

  <sessions>
    <session name="http_test_1" probability="100" type="ts_http">
      <!--
          1. First request return 401. We use dynvars to fetch nonce and realm
      -->
      <request>
        <dyn_variable name="nonce" header="www-authenticate/nonce"/>
        <dyn_variable name="realm" header="www-authenticate/realm"/>
        <http url="/digest" method="GET" version="1.1">
        </http>
      </request>
      <!--
          2. This request will be authenticated. Type="digest" is important.
          We use the nonce and realm values returned from the previous
          If the webserver returns the nextnonce we set it to the nonce dynvar
          for use with the next request.
          Else it stays set to the old value
      -->
      <request subst="true">
        <dyn_variable name="nonce" header="authentication-info/nextnonce"/>
        <http url="/digest" method="GET" version="1.1">
          <www_authenticate userid="user" passwd="passwd" type="digest" realm="%%_realm%%" nonce="%%_nonce%%"/>
          <!--<www_authenticate userid="user" passwd="passwd" type="digest" realm="%%_realm%%" nonce="%%_nonce%%" nc="00000001" cnonce="%%ts_user_server:get_really_unique_id%%"/>-->
        </http>
      </request>

      <!--
          2. This request will still be authenticated
      -->
      <request subst="true">
        <dyn_variable name="nonce" header="authentication-info/nextnonce"/>
        <http url="/digest" method="GET" version="1.1">
          <www_authenticate userid="user" passwd="passwd" type="digest" realm="%%_realm%%" nonce="%%_nonce%%"/>
        </http>
      </request>
    </session>
</sessions>

</tsung>
<?xml version="1.0"?>
<!DOCTYPE tsung SYSTEM "/usr/share/tsung/tsung-1.0.dtd">
<tsung loglevel="debug" dumptraffic="true" version="1.0">

  <clients>
    <client host="localhost" weight="1" maxusers="1000" use_controller_vm="true"/>
  </clients>

  <servers>
    <server host="127.0.0.1" port="8000" type="tcp"></server>
  </servers>

	<load>
   <arrivalphase phase="1" duration="2" unit="second">
    <users interarrival="1" unit="second"></users>
   </arrivalphase>
  </load>

  <sessions>
    <session name="http_test_1" probability="100" type="ts_http">
			<!--1. fetching token from SSO
				using tsung XPath dynvars, the access_token and secret are stored for future use.
				Please note the <oauth/> element with the consumer information. 
				By default requests are signed with "HMAC-SHA1" so it's not necessary here.
			-->
			<request>
				<dyn_variable name="access_token" xpath="/tokenCreationResponse/tokenInfo/token/text()"/>
				<dyn_variable name="access_token_secret" xpath="/tokenCreationResponse/tokenInfo/tokenSecret/text()" />
        <http url="/token" method="POST" version="1.1" contents="rien">
         	<oauth consumer_key="key" consumer_secret="secret"  method="HMAC-SHA1"/>
        </http>
      </request>

			<!--2. access to protected resources 
				Using the variables set from the SSO, we are now able to access the protected resource
				-->
      <request subst="true">
        <http url="/echo" method="GET" version="1.1">
         <oauth consumer_key="key" consumer_secret="secret" access_token="%%_access_token%%" access_token_secret="%%_access_token_secret%%"/>
        </http>
      </request>

			<!--3. refreshing token 
				refreshing the token work mostly as in step 1.
				Values are overridden-->
			
			<request subst="true">
				<dyn_variable name="access_token" xpath="/tokenCreationResponse/tokenInfo/token/text()"/>
				<dyn_variable name="access_token_secret" xpath="/tokenCreationResponse/tokenInfo/tokenSecret/text()" />
        <http url="/token/%%_access_token%%" method="PUT" version="1.1">
         	<oauth consumer_key="key" consumer_secret="secret"/>
        </http>
      </request>

			<!--4. access to protected resources 
				See step 2.-->
			
			<request subst="true">
        <http url="/echo" method="GET" version="1.1">
         <oauth consumer_key="key" consumer_secret="secret" access_token="%%access_token_secret%%" access_token_secret="%%access_token_secret%%"/>
        </http>
      </request>
    </session>
</sessions>

</tsung>


<?xml version="1.0"?>
<!DOCTYPE tsung SYSTEM "/usr/share/tsung/tsung-1.0.dtd">
<!-- set dumptraffic="true" to dump all received and sent packets -->
<!-- set loglevel="debug" for maximum verbosity -->
<tsung loglevel="notice" dumptraffic="false" version="1.0">

  <!-- Client side setup -->
  <clients>
    <!-- maxusers is the max number of simultaneous clients. Don't set
    it too high because you can run out of file descriptors. Remember
    that ssl_esock use 2 fds by connection. -->

    <client host="myhost" weight="2" maxusers="500">
      <!-- Several virtual IP can be used to simulate more
      machines. Very useful when a load-balancer use the client's IP to
      distribute the traffic amoung a cluster of servers-->
      <ip value="192.168.2.223"></ip> 
      <ip value="192.168.2.224"></ip> 
    </client>

    <!-- a second machine is used, with a higher weight, and 2 cpus
    (erlang is not SMP aware, so we starts 2 beams to use all the
    CPUs -->
    <client host="myhost2" weight="3" maxusers="250" cpu="2">
      <ip value="192.168.2.225"></ip>
    </client>

    <!-- If you have a single machine to do the tests, you may add
    this attribute to the client tag: use_controller_vm="true" . This
    will run the virtual users on the same Virtual Machine as the
    controller. Useful if you have problems with starting up remote
    beam -->

  </clients>
  
  <!-- Server side setup -->
<servers>
  <server host="myserver" port="80" type="tcp"/>
</servers>

  <!-- to start os monitoring (cpu, network, memory). Use an erlang
  agent on the remote machine or SNMP. erlang is the default --> 
  <monitoring>
    <monitor host="myserver" type="snmp"></monitor>
    <monitor host="myhost" type="erlang"></monitor>
  </monitoring>
  
  <!-- several arrival phases can be set: for each phase, you can set
  the mean inter-arrival time between new clients and the phase
  duration -->
 <load>
  <arrivalphase phase="1" duration="1" unit="hour">
    <users interarrival="2" unit="second"></users>
  </arrivalphase>
  <arrivalphase phase="2" duration="1" unit="hour">
    <users interarrival="1" unit="second"></users>
  </arrivalphase>
 </load>

  <!--  Options. -->
  <options> 
  <!-- Thinktime value overrides those set in the session
  nodes if override=true. -->
  <option name="thinktime" value="3" random="true" override="false"></option>

  <!-- to set specific ssl_ciphers -->
  <!--   <default name="ssl_ciphers" value="EXP1024-RC4-SHA,EDH-RSA-DES-CBC3-SHA"></default> -->

  <option name="tcp_rcv_buffer"  value="4096"></option>
  <option name="tcp_snd_buffer"  value="4096"></option>

  <!-- To start ts_file_server. It can be use later in dynamic
  substitution using ts_file_server:get_next_line() --> 
 <option name="file_server"  value="./src/test/test_file_server.csv"></option>

  <!-- HTTP parameters -->
  
  <!-- If you want to benchmark a proxy server instead of a reguler web server-->
<!--   <default type="ts_http" name="http_use_server_as_proxy" value="true"/> -->

   <option type="ts_http" name="user_agent">
    <user_agent probability="80">Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.7.8) Gecko/20050513 Galeon/1.3.21</user_agent>
    <user_agent probability="20">Mozilla/5.0 (Windows; U; Windows NT 5.2; fr-FR; rv:1.7.8) Gecko/20050511 Firefox/1.0.4</user_agent>
   </option>
  </options> 

  <!-- ********************************************** -->
  <!-- start a session for a http user. the popularity is the
  frequency of this type os session. The sum of all session's
  popularity must be 100 -->
  <!-- ********************************************** -->
 <sessions>
  <session name="http-example" probability="30" type="ts_http">
    <!-- full url with server name, this overrides the "server" config value -->
    <request> <http url="http://linuxit02/" method="GET" version="1.1"></http> </request>
    <!-- when if_modified_since is defined, it send a GET with If-modified since: Date header -->
    <!-- relative URL, use the latest server config -->
    <request> <http url="/images/accueil2/home-txtdeclar-2.gif" method="GET" version="1.1" if_modified_since="Fri, 14 Nov 2003 02:43:31 GMT"></http> </request>

    <thinktime value="20" random="true"></thinktime>
    
    <!--  after a thinktime, a new page begins. -->
    <!--  start a transaction. This is used to have custom response time statistics -->
    <transaction name="index_request">
    <request> <http url="/index.en.html" method="GET" version="1.1" ></http> </request>

      <!-- Example of a dynamic request (subst=true); %%symbol:new%%
      will be parsed and the result of symbol:new(Pid) will be put
      instead in the request (at run time) -->
      <request subst="true">
        <http url='http://localhost:8080/axis/servlet/AxisServlet' version='1.0' content_type='text/xml; charset=utf-8' method='POST' 
          contents='&lt;?xml version="1.0" encoding="UTF-8"?&gt;
 &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:soapenc="http://schemas.xmlsoap.org/soap/encoding/"&gt; &lt;SOAP-ENV:Body&gt;
 &lt;echo:Echo xmlns:echo="EchoService"&gt;
 &lt;symbol&gt;%%symbol:new%%&lt;/symbol&gt;
 &lt;/echo:Echo&gt;
 &lt;/SOAP-ENV:Body&gt;&lt;/SOAP-ENV:Envelope&gt;'>
          <soap action='EchoService'></soap>
        </http>
      </request>

  </transaction>

    <!-- wait during 60 seconds -->
      <thinktime value="60" random="true"></thinktime>

      <request> <http url="/" method="POST" version="1.1" contents="bla=blu"></http> </request>

    <!-- GET request with Basic authentication -->
      <request> <http url="/bla" method="GET" version="1.1" contents="bla=blu&amp;name=glop">
          <www_authenticate userid="Aladdin" passwd="open sesame"/>
        </http>
      </request>
  </session>


  <session name="http-example" probability="30" type="ts_http">

    <request> <http url="/" method="GET" version="1.1"></http> </request>
    <request> <http url="/images/icon1.gif" method="GET" version="1.1" if_modified_since="Fri, 14 Nov 2003 02:43:31 GMT"></http> </request>
    <request> <http url="/images/icon1.gif" method="GET" version="1.1"></http> </request>

    <thinktime value="60" random="true"></thinktime>

    <request> <http url="/" method="GET" version="1.1"  if_modified_since="Fri, 14 Nov 2003 02:43:31 GMT"></http> </request>

  </session>
 </sessions>
</tsung>
<?xml version="1.0"?>
<!DOCTYPE tsung SYSTEM "/usr/share/tsung/tsung-1.0.dtd">
<tsung loglevel="debug" dumptraffic="true" version="1.0">

  <clients>
    <client host="localhost" weight="1" maxusers="1000" use_controller_vm="true"/>
  </clients>

  <servers>
    <server host="localhost" port="80" type="tcp"></server>
  </servers>

  <monitoring>
    <monitor host="localhost" type="erlang"/> 
  </monitoring>

  <load loop="2">
    <arrivalphase phase="1" duration="1" unit="minute">
      <users maxnumber="1" interarrival="0.1" unit="second"/>
  </arrivalphase>
    <arrivalphase phase="3" duration="1" unit="minute">
      <session_setup name="http_test_1" probability="80"/>
      <session_setup name="fake"        probability="20"/>
      <users maxnumber="2" interarrival="1" unit="second"/>
    </arrivalphase>
  </load>

  <options>
    <option name="file_server" id='userdb' value="./src/test/test_file_server.csv"/>
    <option type="ts_http" name="user_agent">
      <user_agent probability="100">
        Some browser version 42
      </user_agent>
    </option>
  </options>

  <sessions>
    <session name="http_test_1" probability="100" type="ts_http">
      
      <setdynvars sourcetype="erlang" callback="ts_user_server:get_unique_id">
        <var name="id1" />
      </setdynvars>

      <setdynvars sourcetype="erlang" callback="ts_user_server:get_really_unique_id">
        <var name="id2" />
      </setdynvars>
      
      <setdynvars sourcetype="file" fileid="userdb" delimiter=";" order="iter">
        <var name="user" />
        <var name="user_password" />
      </setdynvars> 
      
      <setdynvars sourcetype="random_string" length="13">
        <var name="rndstring1" />
      </setdynvars> 

      <setdynvars sourcetype="random_number" start="3" end="32">
        <var name="rndint" />
      </setdynvars> 

      <request>
        <http url="/" method="GET" version="1.1">
         <http_header name="cache-control" value="no-cache"/>
         <http_header name="User-Agent" value="pseudo googlebot"/>
        </http>
      </request>

      <thinktime min="2" max="4"></thinktime>

      <request subst="true">
        <dyn_variable name="title" re="&lt;title&gt;(.*)&lt;/title&gt;"/>
        <http url="/test.html%%_rndint%%&amp;id=%%_id1%%" method="GET" version="1.1"/></request>
      <thinktime value="5" random="true"/>

      <setdynvars sourcetype="random_string" length="5">
        <var name="rndstring2" />
      </setdynvars> 

      <request subst="true">
        <http url="/index.html?toto=%%_title%%&amp;user=%%_user%%&amp;password=%%_user_password%%&amp;id=%%_rndstring2%%&amp;id2=%%_id2%%" method="GET" version="1.1"/>
      </request>
      
      <thinktime value="4" random="true"/>
      
      <request><http url="/" method="GET" version="1.1"/></request>

    </session>

    <session name="fake" probability="0" type="ts_http">
      <thinktime value="5" random="true"/>
    </session>

</sessions>

</tsung>


<?xml version="1.0"?>
<!DOCTYPE tsung SYSTEM "/usr/share/tsung/tsung-1.0.dtd">
<tsung loglevel="notice" version="1.0">

  <!-- Client side setup -->
  <clients>
    <client host="localhost" use_controller_vm="true"/>
  </clients>
  
  <!-- Server side setup -->
<servers>
  <server host="myserver" port="80" type="tcp"></server>
</servers>

  <!-- to start os monitoring (cpu, network, memory). Use an erlang
  agent on the remote machine or SNMP. erlang is the default --> 
  <monitoring>
    <monitor host="myserver" type="snmp"></monitor>
  </monitoring>
  
  <load>
  <!-- several arrival phases can be set: for each phase, you can set
  the mean inter-arrival time between new clients and the phase
  duration -->
   <arrivalphase phase="1" duration="10" unit="minute">
     <users interarrival="2" unit="second"></users>
   </arrivalphase>
  </load>

  <options>
   <option type="ts_http" name="user_agent">
    <user_agent probability="80">Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.7.8) Gecko/20050513 Galeon/1.3.21</user_agent>
    <user_agent probability="20">Mozilla/5.0 (Windows; U; Windows NT 5.2; fr-FR; rv:1.7.8) Gecko/20050511 Firefox/1.0.4</user_agent>
   </option>
  </options>

  <!-- start a session for a http user. the probability is the
  frequency of this type os session. The sum of all session's
  probabilities must be 100 -->

 <sessions>
  <session name="http-example" probability="100" type="ts_http">

    <!-- full url with server name, this overrides the "server" config value -->

    <request> <http url="/" method="GET" version="1.1"></http> </request>
    <request> <http url="/images/accueil1.gif" method="GET" version="1.1" if_modified_since="Fri, 14 Nov 2003 02:43:31 GMT"></http> </request>
    <request> <http url="/images/accueil2.gif" method="GET" version="1.1" if_modified_since="Fri, 14 Nov 2003 02:43:31 GMT"></http> </request>
    <request> <http url="/images/accueil3.gif" method="GET" version="1.1" if_modified_since="Fri, 14 Nov 2003 02:43:31 GMT"></http> </request>

    <thinktime value="20" random="true"></thinktime>
    
    <request> <http url="/index.en.html" method="GET" version="1.1" ></http> </request>

  </session>
 </sessions>
</tsung>
<?xml version="1.0"?>
<!DOCTYPE tsung SYSTEM "/usr/share/tsung/tsung-1.0.dtd">
<tsung loglevel="notice" version="1.0">

  <!-- Client side setup -->
  <clients>
    <client host="localhost" use_controller_vm="true"/>
  </clients>

  <!-- Server side setup -->
  <servers>
    <server host="localhost" port="80" type="tcp"></server>
  </servers>

  <load>
  <!-- several arrival phases can be set: for each phase, you can set
  the mean inter-arrival time between new clients and the phase
  duration -->
   <arrivalphase phase="1" duration="10" unit="minute">
     <users interarrival="2" unit="second"></users>
   </arrivalphase>
  </load>

 <sessions>
  <session name="images" probability="100" type="ts_http">

    <request>
      <http url="/" method="GET" version="1.1"></http>
    </request>

    <!-- this request will be exclude in the unit test -->
    <request tag="landing">
      <http url="/img/excluded.png" method="GET" version="1.1"></http>
    </request>

    <!-- this request will be exclude in the unit test -->
    <request tag="gif">
      <http url="/img/excluded.gif" method="GET" version="1.1"></http>
    </request>

    <request>
      <http url="/img/not-excluded.png" method="GET" version="1.1"></http>
    </request>


  </session>
 </sessions>
</tsung>
<?xml version="1.0"?>
<!DOCTYPE tsung SYSTEM "/usr/share/tsung/tsung-1.0.dtd">
<tsung loglevel="notice" version="1.0">

  <clients>
    <client host="localhost" use_controller_vm="true"></client>
  </clients>

  <!-- Server side setup -->
 <servers>
  <server host="127.0.0.1" port="5222" type="tcp"></server>
 </servers>

  <load>
   <arrivalphase phase="1" duration="1" unit="minute">
    <users interarrival="2" unit="second"></users>
   </arrivalphase>
  </load>

  <!-- JABBER parameters -->
  <!-- to synchronise users,  use a global acknoledgement -->
 <options>
  <option type="ts_jabber" name="global_number" value="100"></option>
  <option type="ts_jabber" name="userid_max" value="10000"></option>
  <option type="ts_jabber" name="domain" value="mydomain.org"></option>
  <option type="ts_jabber" name="username" value="user"></option>
  <option type="ts_jabber" name="passwd" value="pass"></option>
 </options>

  <sessions>
   <session probability="50" name="jabber-example" type="ts_jabber">

    <request> <jabber type="connect" ack="no_ack"></jabber> </request>
    <thinktime value="2"></thinktime>
    <transaction name="authenticate">
      <request> <jabber type="auth_get" ack="local"></jabber> </request>
      <request> <jabber type="auth_set_plain" ack="local"></jabber> </request>
    </transaction>

    <request> <jabber type="presence:initial" ack="no_ack"/> </request>
    <thinktime value="2"></thinktime>

    <transaction name="roster">
      <request> <jabber type="iq:roster:get" ack="local"></jabber></request>
    </transaction>

    <thinktime value="30"></thinktime>

    <transaction name="online">
    <request> <jabber type="chat" ack="no_ack" size="16" destination="online"></jabber> </request>
    </transaction>

    <thinktime value="30"></thinktime>

    <transaction name="offline">
      <request> <jabber type="chat" ack="no_ack" size="56" destination="offline"></jabber> </request>
    </transaction>

    <thinktime value="30"></thinktime>

    <transaction name="close">
      <request> <jabber type="close" ack="no_ack"></jabber> </request>
    </transaction>

  </session>

  <session probability="20" name="jabber-plain" type="ts_jabber">

    <request> <jabber type="connect" ack="no_ack"></jabber> </request>

    <thinktime value="2"></thinktime> 

    <transaction name="auth_plain">
      <request> <jabber type="auth_get" ack="local"></jabber> </request>
      <request> <jabber type="auth_set_plain" ack="local"></jabber> </request>
    </transaction>

    <thinktime value="30"></thinktime>

    <transaction name="close">
      <request> <jabber type="close" ack="no_ack"></jabber> </request>
    </transaction>

  </session>

	

  <session probability="20" name="jabber-digest" type="ts_jabber">

    <!-- regexp captures stream ID returned by server -->
    <request>
      <dyn_variable name="sid" re="&lt;stream:stream id=&quot;(.*)&quot; xmlns:stream"/>
      <jabber type="connect" ack="local"></jabber>
    </request>

    <thinktime value="2"></thinktime>

    <transaction name="auth_digest">
      <request> <jabber type="auth_get" ack="local"></jabber> </request>
      <request subst='true'> <jabber type="auth_set_digest" ack="local"></jabber> </request>
    </transaction>
    <thinktime value="30"></thinktime>

    <transaction name="close">
      <request> <jabber type="close" ack="no_ack"></jabber> </request>
    </transaction>
  </session>

	
	

  <session probability="10" name="jabber-sipdigest" type="ts_jabber">

    <request> <jabber type="connect" ack="no_ack"></jabber> </request>

    <thinktime value="2"></thinktime>

    <transaction name="auth_sipdigest">
      <!-- regexp captures nonce value returned by server -->
      <request>
        <dyn_variable name="nonce" re="&lt;Nonce encoding=&quot;hex&quot;&gt;(.*)&lt;\/Nonce&gt;"/>
        <jabber type="auth_get" ack="local"></jabber>
      </request>
      <request subst='true'> <jabber type="auth_set_sip" ack="local"></jabber> </request>
    </transaction>
    <thinktime value="30"></thinktime>

    <transaction name="close">
      <request> <jabber type="close" ack="no_ack"></jabber> </request>
    </transaction>
  </session>

	


 </sessions>
</tsung>

<?xml version="1.0"?>
<!DOCTYPE tsung SYSTEM "/usr/share/tsung/tsung-1.0.dtd">
<tsung loglevel="notice" version="1.0">

  <clients>
    <client host="localhost" use_controller_vm="true"></client>
  </clients>

  <!-- Server side setup -->
 <servers>
  <server host="127.0.0.1" port="5222" type="tcp"></server>
 </servers>

  <load>
   <arrivalphase phase="1" duration="1" unit="minute">
    <users interarrival="2" unit="second"></users>
   </arrivalphase>
  </load>

  <!-- JABBER parameters -->
  <!-- to synchronise users,  use a global acknoledgement -->
 <options>
  <option type="ts_jabber" name="global_number" value="100"></option>
  <option type="ts_jabber" name="userid_max" value="10000"></option>
  <option type="ts_jabber" name="domain" value="mydomain.org"></option>
  <option type="ts_jabber" name="username" value="user"></option>
  <option type="ts_jabber" name="passwd" value="pass"></option>

  <option type="ts_jabber" name="muc_service" value="conference.mydomain.org"/>
  <!-- full name of the MUC component -->
 </options>

  <sessions>
   <session bidi="true" probability="100" name="jabber-muc" type="ts_jabber">

    <request> <jabber type="connect" ack="no_ack"></jabber> </request>
    <thinktime value="2"></thinktime>
    <transaction name="authenticate">
      <request> <jabber type="auth_get" ack="local"></jabber> </request>
      <request> <jabber type="auth_set_plain" ack="local"></jabber> </request>
    </transaction>

    <request> <jabber type="presence:initial" ack="no_ack"/> </request>
    <thinktime value="2"></thinktime>

    <transaction name="roster">
      <request> <jabber type="iq:roster:get" ack="local"></jabber></request>
    </transaction>

    <thinktime value="30"></thinktime>
    
    <!-- choose room name and nick. -->
    <setdynvars sourcetype="random_number" start="1" end="100">
        <var name="room"/>
    </setdynvars>
    <setdynvars sourcetype="random_string" length="10">
        <var name="nick1"/>
    </setdynvars>

    <!-- join an existing room or create a new one -->
    <request subst="true"> <jabber type='muc:join' ack = "local" room = "room%%_room%%" nick = "%%_nick1%%"/> </request>

    <for from="1" to="4" var="i">
        <thinktime value="45"/>
        <transaction name="online_chat">
            <request subst="true"> <jabber type="muc:chat" ack="no_ack" size="16" room = "room%%_room%%"/> </request>
        </transaction>
    </for>

    <!-- choose a new nickname -->
    <thinktime value="2"/>
    <setdynvars sourcetype="random_string" length="10">
        <var name="nick2"/>
    </setdynvars>
    <request subst="true"><jabber type="muc:nick" room="room%%_room%%" nick="%%_nick2%%" ack="no_ack"/></request>

    <for from="1" to="2" var="i">
        <thinktime value="35"/>
        <transaction name="online_chat">
            <request subst="true"> <jabber type="muc:chat" ack="no_ack" size="16" room="room%%_room%%"/> </request>
        </transaction>
    </for>

    <transaction name="close">
      <request> <jabber type="close" ack="no_ack"></jabber> </request>
    </transaction>

  </session>


 </sessions>
</tsung>

<?xml version="1.0"?>
<!DOCTYPE tsung SYSTEM "/usr/share/tsung/tsung-1.0.dtd">
<tsung loglevel="debug" version="1.0">

  <!-- Client side setup -->
  <clients>
    <client host="localhost" use_controller_vm="true"></client>
  </clients>

  <!-- Server side setup -->
 <servers>
  <server host="localhost" port="5222" type="tcp"></server>
 </servers>

 <!-- Define the traffic pattern of the users coming in -->
  <load>
    <user session="create_node" start_time="0" unit="minute"></user>
    <arrivalphase phase="2" duration="1" unit="minute">
      <users interarrival="2" unit="second"></users>
    </arrivalphase>
  </load>

  <!-- JABBER parameters -->
  <!-- to synchronise users,  use a global acknoledgement -->
 <options>
   <option type="ts_jabber" name="pubsub_service" value="pubsub.localhost"/>
   <option type="ts_jabber" name="global_number" value="100"></option>
   <option type="ts_jabber" name="userid_max" value="1"></option>
   <option type="ts_jabber" name="domain" value="localhost"></option>
   <option type="ts_jabber" name="username" value="user"></option>
   <option type="ts_jabber" name="passwd" value="pass"></option>
 </options>

 <sessions>
   <!-- Create nodes -->
   <session probability='0' name="create_node" type="ts_jabber">
     <request> <jabber type="connect" ack="local"/> </request>
     <thinktime value="2" random="true"/>
     <request> <jabber type="auth_sasl" ack="local"/> </request>
     <thinktime value="2" random="true"/>
     <request> <jabber type="connect" ack="local"></jabber> </request>
     <thinktime value="2" random="true"/>
     <request> <jabber type="auth_sasl_bind" ack="local" ></jabber></request>
     <thinktime value="2" random="true"/>
     <request> <jabber type="auth_sasl_session" ack="local" ></jabber></request>
     <thinktime value="5" random="true"/>

     <!-- Create the node -->
     <request subst="true">
       <jabber type='pubsub:create' ack="local" node="/test" node_type="flat"
         data="[{'pubsub#access_model','open'},
                {'pubsub#deliver_payloads','1'},
                {'pubsub#notify_retract', '0'},
                {'pubsub#persist_items', '0'},
                {'pubsub#max_items', '0'},
                {'pubsub#send_last_published_item', 'never'},
                {'pubsub#publish_model', 'open'}]."/>
     </request>

     <request> <jabber type="close" ack="local"></jabber> </request>
   </session>

   <session bidi="true" probability="100" name="sasl" type="ts_jabber">
     <thinktime value="15"/>
     <request> <jabber type="connect" ack="local"/> </request>
     <thinktime value="2" random="true"/>
     <request> <jabber type="auth_sasl" ack="local"/> </request>
     <thinktime value="2" random="true"/>
     <request> <jabber type="connect" ack="local"></jabber> </request>
     <thinktime value="2" random="true"/>
     <request> <jabber type="auth_sasl_bind" ack="local" ></jabber></request>
     <thinktime value="2" random="true"/>
     <request> <jabber type="auth_sasl_session" ack="local" ></jabber></request>
     <thinktime value="5" random="true"/>

     <request>
       <jabber type='pubsub:subscribe' ack="local" node="/test"/>
     </request>

     <for from="1" to="10" var="i">
       <thinktime value="5" random="true"/>
       <request>
         <jabber type='pubsub:publish' size='9' ack="local" node="/test"/>
       </request>
     </for>

     <request> <jabber type="close" ack="local"></jabber> </request>
   </session>
 </sessions>
</tsung>
<?xml version="1.0"?>
<!DOCTYPE tsung SYSTEM "/usr/share/tsung/tsung-1.0.dtd">
<tsung loglevel="notice" dumptraffic="true" version="1.0">

  <clients>
    <client host="localhost" use_controller_vm="true">
    </client>
  </clients>

<servers>
   <server host='127.0.0.1' port='5222' type='tcp'/>
</servers>

<load>
  <arrivalphase phase="1" duration="15" unit="second">
    <users maxnumber="1" interarrival="1.0" unit="second"></users>
  </arrivalphase>
  </load>

<options>
  <option type="ts_jabber" name="global_number" value="5"></option>
  <option type="ts_jabber" name="userid_max" value="1"></option>
  <option type="ts_jabber" name="domain" value="localhost"></option>
  <option type="ts_jabber" name="username" value="user"></option>
  <option type="ts_jabber" name="passwd" value="pass"></option>
</options>

<sessions>
  <session probability="100" name="jabber-example" type="ts_jabber">

    <request>
      <jabber type="connect" ack="local"></jabber>
    </request>

    <!-- authentication type is of course unimportant for privacy testing -->
    <transaction name="authenticate">
      <request> <jabber type="auth_get" ack="local"></jabber> </request>
      <request> <jabber type="auth_set_plain" ack="local"></jabber> </request>
    </transaction>
    <request>
      <jabber type="privacy:get_names" ack="local"></jabber>
    </request>

    <request>
      <jabber type="privacy:set_active" ack="local"></jabber>
    </request>

    <request>
      <jabber type="privacy:get_names" ack="local"></jabber>
    </request>

    <request>
      <jabber type="close" ack="local"></jabber>
    </request>

  </session>
</sessions>
</tsung>
<?xml version="1.0"?>
<!DOCTYPE tsung SYSTEM "/usr/share/tsung/tsung-1.0.dtd">
<tsung loglevel="notice" dumptraffic="false" version="1.0">

  <clients>
    <client host="localhost" use_controller_vm="true">
    </client>
  </clients>

<servers>
   <server host='127.0.0.1' port='5222' type='tcp'/>
</servers>

<!-- register 200000 users in less than 15 minutes  -->
<load>
  <arrivalphase phase="1" duration="15" unit="minute">
    <users maxnumber="200000" interarrival="0.0025" unit="second"></users>
  </arrivalphase>
  </load>

<options>
  <option type="ts_jabber" name="global_number" value="5"></option>
  <option type="ts_jabber" name="userid_max" value="200000"></option>
  <option type="ts_jabber" name="domain" value="erlang-projects.org"></option>
  <option type="ts_jabber" name="username" value="tsung"></option>
  <option type="ts_jabber" name="passwd" value="tsung"></option>
</options>

<sessions>
  <session probability="100" name="jabber-example" type="ts_jabber">

    <request>
      <jabber type="connect" ack="local"></jabber>
    </request>

    <request>
      <match do="abort" when="match">error</match>
      <jabber type="register" ack="local" id="new"></jabber>
    </request>

    <request>
      <jabber type="close" ack="local"></jabber>
    </request>

  </session>
</sessions>
</tsung>
<?xml version="1.0"?>
<!DOCTYPE tsung SYSTEM "/usr/share/tsung/tsung-1.0.dtd">
<tsung loglevel="notice" dumptraffic="false" version="1.0">

  <clients>
    <client host="localhost" use_controller_vm="true">
    </client>
  </clients>

<servers>
   <server host='127.0.0.1' port='5222' type='tcp'/>
</servers>

<load>
  <arrivalphase phase="1" duration="5" unit="minute">
    <users interarrival="0.1" unit="second"></users>
  </arrivalphase>
  </load>

<options>
  <option type="ts_jabber" name="global_number" value="5"></option>
  <option type="ts_jabber" name="userid_max" value="20000"></option>
  <option type="ts_jabber" name="domain" value="erlang-projects.org"></option>
  <option type="ts_jabber" name="username" value="tsung"></option>
  <option type="ts_jabber" name="passwd" value="tsung"></option>
</options>

<sessions>
  <!-- set bidi to true -->
 <session bidi="true" probability="100" name="jabber-example" type="ts_jabber">

   <request> <jabber type="connect" ack="local"></jabber> </request>
   <transaction name="authenticate">
     <request> <jabber type="auth_get" ack="local"></jabber> </request>
     <request> <jabber type="auth_set_plain" ack="local"></jabber> </request>
   </transaction>

   <thinktime value="2"></thinktime>

   <request> <jabber type="iq:roster:get" ack="local"/> </request>

  <thinktime value="2"></thinktime>

  <request> <jabber type="presence:initial" ack="no_ack"/> </request>

  <thinktime value="60"></thinktime>

  <!-- add five online users in the roster -->
  <transaction name="rosteradd">
    <request> <jabber type="iq:roster:add" ack="no_ack" destination="online"></jabber> </request>
    <request> <jabber type="presence:subscribe" ack="no_ack"/> </request>

    <request> <jabber type="iq:roster:add" ack="no_ack" destination="online"></jabber> </request>
    <request> <jabber type="presence:subscribe" ack="no_ack"/> </request>

    <request> <jabber type="iq:roster:add" ack="no_ack" destination="online"></jabber> </request>
    <request> <jabber type="presence:subscribe" ack="no_ack"/> </request>

    <request> <jabber type="iq:roster:add" ack="no_ack" destination="online"></jabber> </request>
    <request> <jabber type="presence:subscribe" ack="no_ack"/> </request>

    <request> <jabber type="iq:roster:add" ack="no_ack" destination="online"></jabber> </request>
    <request> <jabber type="presence:subscribe" ack="no_ack"/> </request>
  </transaction>

 <!-- wait a long time  to let others session to add me in their roster-->
  <thinktime value="600"></thinktime>

  <request> <jabber type="presence:final" ack="no_ack"/> </request>
  <thinktime value="1"></thinktime>
  <request> <jabber type="close" ack="local"></jabber> </request>

 </session>
</sessions>
</tsung>
<?xml version="1.0"?>
<!DOCTYPE tsung SYSTEM "/usr/share/tsung/tsung-1.0.dtd">
<tsung loglevel="notice" version="1.0">

  <!-- Client side setup -->
  <clients>
    <client host="localhost" use_controller_vm="true"/>
  </clients>
  
  <!-- Server side setup -->
<servers>
  <server host="myserver" port="80" type="tcp"></server>
</servers>

  <monitoring>
    <monitor host="myserver" type="snmp"></monitor>
  </monitoring>
  
  <load>
   <arrivalphase phase="1" duration="10" unit="minute">
     <users interarrival="2" unit="second"></users>
   </arrivalphase>
  </load>

  <options>
  </options>

  <!-- start a session for a http user. the probability is the
  frequency of this type os session. The sum of all session's
  probabilities must be 100 -->

 <sessions>
  <session name="ldap-example" probability="100" type="ts_ldap">

    <!-- **startTLS** 
    <request subst="false">
      <ldap type="start_tls"
            cacertfile="/etc/ldap/ssl/cacertfile.pem"
            certfile="/etc/ldap/ssl/certfile.pem"
            keyfile="/etc/ldap/ssl/keyfile.pem">
      </ldap>
    </request>
    -->

    <request>
        <ldap type="bind" user="uid=nniclausse" password="XXX"/>
    </request>
    
    <request>
       <ldap type="search" base="dc=pablo-desktop" filter="(cn=user2)" scope="wholeSubtree"></ldap> </request>

    <request subst="true">
       <ldap type="search" base="dc=pablo-desktop" filter="(&amp;(cn=a*%%cn:f%%*n)(dc=pablo-desktop))" scope="wholeSubtree"></ldap></request>

    <thinktime value="1" ></thinktime>

    <request>
      <ldap type="search" base="dc=pablo-desktop" filter="(filename=C:\5cMyFile)" scope="wholeSubtree"></ldap>
    </request>


<!-- **Add. Adds a new entry to the directory** -->
<request subst="true">
  <ldap type="add" dn="%%_new_user_dn%%" >
    <attr type="objectClass">
      <value>organizationalPerson</value>
      <value>inetOrgPerson</value>
      <value>person</value>
    </attr>
    <attr type="cn"><value>%%_new_user_cn%%</value></attr>
    <attr type="sn"><value>fffs</value></attr>
  </ldap>
</request>


<!-- **Modify. Modifies an existing entry ** -->
<request subst="false">
  <ldap type="modify" dn="cn=u119843,dc=pablo-desktop" >
    <modification type="add"/>
    <modification type="replace">
      <attr type="sn"><value>SomeSN</value></attr>
      <attr type="mail"><value>some@mail.com</value></attr>
    </modification>
    <modification type="delete"/>
  </ldap>
</request>
  </session>
 </sessions>
</tsung>
<?xml version="1.0"?>
<!DOCTYPE tsung SYSTEM "/usr/share/tsung/tsung-1.0.dtd">
<tsung loglevel="debug" version="1.0">
    <clients>
        <client host="ubuntu" maxusers="5"></client>
    </clients>

	<servers>
        <server host="127.0.0.1" port="5672" type="tcp" />
	</servers>

    <load>
        <user session="mqtt_subscriber" start_time="10" unit="second"></user>
        <arrivalphase phase="1" duration="3" unit="second">
            <users maxnumber="1" arrivalrate="1" unit="second"/>
        </arrivalphase>
    </load>

    <sessions>
        <session name="mqtt_publisher" probability="100" type="ts_mqtt">
            <request>
                <mqtt type="connect" clean_start="true" keepalive="10" will_topic="will_topic" will_qos="0" will_msg="will_msg" will_retain="false"></mqtt>
            </request>

            <for from="1" to="10" incr="1" var="loops">
                <request subst="true">
                    <mqtt type="publish" topic="test_topic" qos="1" retained="true">test_message</mqtt>
                </request>
            </for>

            <request>
                <mqtt type="disconnect"></mqtt>
            </request>
        </session>
        <session name="mqtt_subscriber" probability="0" type="ts_mqtt">
            <request>
                <mqtt type="connect" clean_start="true" keepalive="10"></mqtt>
            </request>

            <request subst="true">
                <mqtt type="subscribe" topic="test_topic" qos="1"></mqtt>
            </request>

            <request>
                <!-- wait for 60s -->
                <mqtt type="waitForMessages" timeout="60"></mqtt>
            </request>

            <request subst="true">
                <mqtt type="unsubscribe" topic="test_topic"></mqtt>
            </request>

            <request>
                <mqtt type="disconnect"></mqtt>
            </request>
        </session>
    </sessions>
</tsung>
<?xml version="1.0"?>
<!DOCTYPE tsung SYSTEM "/usr/share/tsung/tsung-1.0.dtd">
<tsung loglevel="debug" dumptraffic="true">

  <clients>
    <client host="localhost" use_controller_vm="true"/>
  </clients>

  <!-- Server side setup -->
 <servers>
  <server host="192.168.0.2" port="3306" type="tcp"/>
 </servers>

  <monitoring>
   <monitor host="localhost"/>
  </monitoring>

 <load>
  <arrivalphase phase="1" duration="1" unit="minute">
    <users interarrival="3" unit="second"></users>
  </arrivalphase>
 </load>

 <sessions>
  <session probability="100" name="mysql-example" type="ts_mysql">
      <request>
        <mysql type="connect" />
      </request>
      <request>
        <mysql type="authenticate" database="test" username="test" password="test" />
      </request>
      <request>
        <mysql type="sql">SHOW TABLES</mysql>
      </request>
      <request>
        <mysql type="sql">SELECT * FROM gens</mysql>
      </request>
      <request>
        <mysql type="sql">SELECT * FROM te</mysql>
      </request>
      <request>
        <mysql type="close"></mysql>
      </request>
  </session>
 </sessions>
</tsung>

<?xml version="1.0"?>
<!DOCTYPE tsung SYSTEM "/usr/share/tsung/tsung-1.0.dtd">
<tsung loglevel="notice">

  <clients>
    <client host="localhost" use_controller_vm="true"/>
  </clients>

  <!-- Server side setup -->
 <servers>
  <server host="127.0.0.1" port="5432" type="tcp"/>
 </servers>

  <monitoring>
   <monitor host="localhost"/>
  </monitoring>
  
 <load>
  <arrivalphase phase="1" duration="10" unit="minute">
    <users interarrival="30" unit="second"></users>
  </arrivalphase>
 </load>

 <sessions>
  <session probability="100" name="pgsql-example" type="ts_pgsql">
    <transaction name="connection">
      <request>
        <pgsql type="connect" database="bench" username="bench" />
      </request>
    </transaction>

    <transaction name="authentication">
      <request>
        <pgsql type="authenticate" password="sesame"/>
      </request>
    </transaction>

    <thinktime value="2"/>

    <transaction name="select">
      <request><pgsql type="sql">SELECT * from accounts;</pgsql></request>
    </transaction>

    <thinktime value="20"/>

    <request><pgsql type="sql">SELECT * from users;</pgsql></request>

    <request><pgsql type='sql'><![CDATA[SELECT n.nspname as "Schema",
  c.relname as "Name",
  CASE c.relkind WHEN 'r' THEN 'table' WHEN 'v' THEN 'view' WHEN 'i' THEN 'index' WHEN 'S' THEN 'sequence' WHEN 's' THEN '%_toto_% END as "Type",
  u.usename as "Owner"
FROM pg_catalog.pg_class c
     LEFT JOIN pg_catalog.pg_user u ON u.usesysid = c.relowner
     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
WHERE c.relkind IN ('r','v','S','')
      AND n.nspname NOT IN ('pg_catalog', 'pg_toast')
      AND pg_catalog.pg_table_is_visible(c.oid)
ORDER BY 1,2;]]></pgsql></request>

    <request><pgsql type="close"></pgsql></request>

  </session>
 </sessions>
</tsung>

<?xml version="1.0"?>
<!DOCTYPE tsung SYSTEM "/usr/share/tsung/tsung-1.0.dtd">
<tsung loglevel="notice">

  <clients>
    <client host="localhost" use_controller_vm="true"/>
  </clients>

 <servers>
  <server host="127.0.0.1" port="5432" type="tcp"/>
 </servers>

 <load>
  <arrivalphase phase="1" duration="600" unit="second">
    <users arrivalrate="2" unit="second"></users>
  </arrivalphase>
  <arrivalphase phase="2" duration="600" unit="second">
    <users arrivalrate="2" unit="minute"></users>
  </arrivalphase>
  <arrivalphase phase="3" duration="6" unit="hour">
    <users arrivalrate="2" unit="hour"></users>
  </arrivalphase>
 </load>

<options>
  <option name="thinktime" value="2" random="false" override="true"/>
</options>

 <sessions>
  <session probability="100" name="pgsql-example" type="ts_pgsql">
    <transaction name="connection">
      <request>
        <pgsql type="connect" database="bench" username="bench" />
      </request>
    </transaction>

    <request>
      <pgsql type="authenticate" password="sesame"/>
    </request>

    <thinktime value="200"/>

    <request><pgsql type="close"></pgsql></request>
    <thinktime min="2" max="7"/>

  </session>
 </sessions>
</tsung>
<?xml version="1.0"?>
<!DOCTYPE tsung SYSTEM "/usr/share/tsung/tsung-1.0.dtd">
<tsung loglevel="notice">

  <clients>
    <client host="localhost" use_controller_vm="true"/>
  </clients>

 <servers>
  <server host="127.0.0.1" port="5432" type="tcp"/>
 </servers>

 <load>
  <arrivalphase phase="1" duration="10" unit="minute">
    <users interarrival="0.5" unit="second"></users>
  </arrivalphase>
  <arrivalphase phase="2" duration="600" unit="second">
    <users interarrival="0.5" unit="minute"></users>
  </arrivalphase>
  <arrivalphase phase="3" duration="6" unit="hour">
    <users interarrival="0.5" unit="hour"></users>
  </arrivalphase>
 </load>

<options>
  <option name="thinktime" value="3" random="true" override="false"/>
</options>

 <sessions>
  <session probability="100" name="pgsql-example" type="ts_pgsql">
    <transaction name="connection">
      <request>
        <pgsql type="connect" database="bench" username="bench" />
      </request>
    </transaction>

    <request>
      <pgsql type="authenticate" password="sesame"/>
    </request>

    <thinktime value="1"/>

    <request><pgsql type="close"></pgsql></request>
    <thinktime/>

  </session>
 </sessions>
</tsung>
<?xml version="1.0"?>
<!DOCTYPE tsung SYSTEM "/usr/share/tsung/tsung-1.0.dtd" []>
<tsung loglevel="notice" version="1.0">
  <clients>
    <client host="localhost" use_controller_vm="true" maxusers="1000" />
  </clients>

  <servers>
    <server host="127.0.0.1" port="8080" type="tcp" />
  </servers>

  <load>
    <arrivalphase phase="1" duration="120" unit="second">
      <users maxnumber="1" arrivalrate="1" unit="second" />
    </arrivalphase>
  </load>

  <sessions>
    <session name="websocket" probability="100" type="ts_websocket">
        <request subst="true">
             <websocket type="connect" path="/chat"></websocket>
        </request>

        <request>
            <dyn_variable name="uid" jsonpath="uid"/>
            <websocket type="message">{"user":"user", "password":"password"}</websocket>
        </request>

        <request subst="true">
            <match do="log" when="nomatch">ok</match>
            <websocket type="message">{"uid":"%%_uid%%", "data":"data"}</websocket>
        </request>

        <request>
            <websocket type="message" ack="no_ack">{"key":"value"}</websocket>
        </request>

        <request>
            <websocket type="close"></websocket>
        </request>
    </session>
  </sessions>
</tsung>
